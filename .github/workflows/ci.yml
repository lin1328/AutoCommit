name: CI

on:
  schedule:
    - cron: "0 2 * * *"

jobs:
  commit:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Clone repository
        uses: actions/checkout@v4

      - name: Auto Commit
        run: |
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          git pull --rebase
          utc_time=$(date -u "+%Y-%m-%d %H:%M:%S UTC")
          export GIT_AUTHOR_NAME="${{ github.actor }}"
          export GIT_AUTHOR_EMAIL="${{ github.actor }}@users.noreply.github.com"
          export GIT_COMMITTER_NAME="actions-user"
          export GIT_COMMITTER_EMAIL="actions-user@users.noreply.github.com"
          git commit --allow-empty -m "$utc_time"
          git push

  cleanup-workflows:
    runs-on: ubuntu-latest

    permissions:
      actions: write

    steps:
      - name: Delete non-running workflow runs
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const perPage = 100;
            let page = 1;
            let totalDeleted = 0;
            let skippedCount = 0;

            console.log("Starting cleanup of workflow runs...");

            while (true) {
              let workflowRuns;

              try {
                console.log(`Fetching workflow runs for page ${page}...`);
                const response = await github.rest.actions.listWorkflowRunsForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: perPage,
                  page: page,
                });

                workflowRuns = response.data;
              } catch (error) {
                console.error("Error fetching workflow runs:", error);
                break;
              }

              const runs = workflowRuns.workflow_runs;

              if (!runs || runs.length === 0) {
                console.log("No more workflow runs to process.");
                break;
              }

              console.log(`Fetched ${runs.length} workflow runs.`);

              await Promise.all(
                runs.map(async (run) => {
                  if (run.status === "in_progress" || run.status === "queued") {
                    skippedCount++;
                    return;
                  }

                  try {
                    await github.rest.actions.deleteWorkflowRun({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      run_id: run.id,
                    });
                    totalDeleted++;
                  } catch (error) {
                    console.error(`Error deleting workflow run ${run.id}:`, error);
                  }
                })
              );

              console.log(`Processed one batch of ${runs.length} workflow runs.`);
              page++;
            }

            console.log(`Cleanup completed: Deleted ${totalDeleted} workflow runs, skipped ${skippedCount} running or queued workflow runs.`);
